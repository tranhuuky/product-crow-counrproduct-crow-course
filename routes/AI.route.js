import express from 'express';
import { requireAuth } from '../middleware/auth.js';
import * as PlayHT from 'playht';
import dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';
import FlashCard from '../models/flash-card.model.js';
dotenv.config();
const router = express.Router();

const apiKeys = [
    { userId: process.env.PLAY_HT_USER_ID, apiKey: process.env.PLAY_HT_API_KEY },
    { userId: process.env.PLAY_HT_USER_ID_1, apiKey: process.env.PLAY_HT_API_KEY_1 },
    { userId: process.env.PLAY_HT_USER_ID_2, apiKey: process.env.PLAY_HT_API_KEY_2 },
    { userId: process.env.PLAY_HT_USER_ID_3, apiKey: process.env.PLAY_HT_API_KEY_3 },
    { userId: process.env.PLAY_HT_USER_ID_4, apiKey: process.env.PLAY_HT_API_KEY_4 },
    { userId: process.env.PLAY_HT_USER_ID_5, apiKey: process.env.PLAY_HT_API_KEY_5 },
    { userId: process.env.PLAY_HT_USER_ID_6, apiKey: process.env.PLAY_HT_API_KEY_6 },
];

let currentKeyIndex = 0;
function getNextApiKey() {
    currentKeyIndex = (currentKeyIndex + 1) % apiKeys.length;
    return apiKeys[currentKeyIndex];
}

// Route API
router.post('/api/tts', requireAuth, async (req, res) => {
    const text = req.body.text?.trim() + "   " || 'ƒê√£ c√≥ l·ªói x·∫£y ra';

    let keyData = getNextApiKey();

    while (true) {
        try {
            PlayHT.init({
                userId: keyData.userId,
                apiKey: keyData.apiKey,
            });

            const stream = await PlayHT.stream(text, {
                voiceEngine: 'PlayDialog',
                voice: 'en-US-Briggs',
                outputFormat: 'mp3',
                voiceEngine: "Play3.0-mini"
            });

            const chunks = [];
            stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)));
            stream.on('end', () => {
                const audioBuffer = Buffer.concat(chunks);
                res.set('Content-Type', 'audio/mpeg');
                res.send(audioBuffer);

            });

            return;
        } catch (error) {
            if (error.statusCode === 429) {
                console.warn(`API Key ${keyData.userId} b·ªã gi·ªõi h·∫°n, ƒë·ªïi key...`);
                keyData = getNextApiKey();
            } else {
                console.error('L·ªói TTS:', error);
                return res.status(500).send('L·ªói t·∫°o TTS');
            }
        }
    }
});

// Kh·ªüi t·∫°o Gemini API v·ªõi API Key t·ª´ .env
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);


// Route API
router.post('/AI-gen', requireAuth, async (req, res) => {
    try {
        const { question, outputLang = 'en' } = req.body; // M·∫∑c ƒë·ªãnh outputLang l√† 'en' (ti·∫øng Anh)
        if (!question) {
            return res.status(400).json({ error: 'C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
        }
        console.log('C√¢u h·ªèi:', question);
        console.log('Ng√¥n ng·ªØ ƒë·∫ßu ra:', outputLang);

        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

        // T·∫°o prompt t·ªëi ∆∞u ƒë·ªÉ ch·ªâ nh·∫≠n b·∫£n d·ªãch
        const prompt = `Translate the following text into ${outputLang} and return only the translated text, nothing else:\n"${question}"`;

        const result = await model.generateContent(prompt);
        const generatedAnswer = result.response.text().trim();

        return res.status(200).json({ answer: generatedAnswer });
    } catch (error) {
        console.error('L·ªói khi g·ªçi Gemini API:', error.message);
        return res.status(500).send('L·ªói server: ' + error.message);
    }
});
// // Route API gen b√†i t·∫≠p t·ª´ flashcard
// router.get('/AI-gen-quiz/:id', requireAuth, async (req, res) => {
//     const { id } = req.params;
//     try {
//         const flashcard = await FlashCard.findById(id).populate('cards');
//         if (!flashcard) {
//             req.flash('error', 'Kh√¥ng t√¨m th·∫•y th·∫ª t·ª´');
//             return res.redirect('/flashcards');
//         }

//         const cardsData = flashcard.cards.map(card => ({
//             vocabulary: card.vocabulary,
//             meaning: card.meaning,
//         }));
//         if (cardsData.length === 0) {
//             req.flash('error', 'Kh√¥ng c√≥ th·∫ª ƒë·ªÉ gen!');
//             return res.redirect(`/flashcards/${id}`);
//         }

//         const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
//         const quiz = {};

//         for (let i = 0; i < cardsData.length; i++) {
//             const { vocabulary, meaning } = cardsData[i];

//             const question = `Nghƒ©a c·ªßa t·ª´: "${vocabulary}"?`;

//             const prompt = `
//                 Given the word "${vocabulary}" meaning "${meaning}", generate exactly 3 incorrect meanings for this word (same language as "${meaning}")
//                 Return only 3 incorrect meanings, one per line, without any additional text or explanation.
//             `;
//             const result = await model.generateContent(prompt);
//             const wrongAnswers = result.response.text().trim().split('\n').slice(0, 3);

//             const answers = [
//                 `+${meaning}`,
//                 `-${wrongAnswers[0] || 'ü§ñ'}`,
//                 `-${wrongAnswers[1] || 'ü§ñ'}`,
//                 `-${wrongAnswers[2] || 'ü§ñ'}`,
//             ];

//             // X√°o tr·ªôn m·∫£ng answers
//             for (let j = answers.length - 1; j > 0; j--) {
//                 const k = Math.floor(Math.random() * (j + 1));
//                 [answers[j], answers[k]] = [answers[k], answers[j]];
//             }

//             quiz[`${i + 1} - ${question}`] = answers;
//         }
//         req.flash('success', 'R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n h·ªçc t·ª´ v·ª±ng!');
//         return res.render('./page/flashcards/quiz', { quiz, flashcard });
//     } catch (error) {
//         console.error('L·ªói khi gen b√†i t·∫≠p:', error.message);
//         req.flash('error', 'L·ªói khi t·∫°o b√†i t·∫≠p');
//         return res.redirect(`/flashcards/`);
//     }
// });
// Route API gen b√†i t·∫≠p t·ª´ flashcard
router.get('/AI-gen-quiz/:id', requireAuth, async (req, res) => {
    const { id } = req.params;
    try {
        const flashcard = await FlashCard.findById(id).populate('cards');
        if (!flashcard) {
            req.flash('error', 'Kh√¥ng t√¨m th·∫•y th·∫ª t·ª´');
            return res.redirect('/flashcards');
        }

        // L·∫•y danh s√°ch cards v√† tr·ªôn ngay t·∫°i ƒë√¢y
        let cardsData = flashcard.cards.map(card => ({
            vocabulary: card.vocabulary,
            meaning: card.meaning,
        }));
        // X√°o tr·ªôn cardsData b·∫±ng thu·∫≠t to√°n Fisher-Yates
        for (let i = cardsData.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [cardsData[i], cardsData[j]] = [cardsData[j], cardsData[i]];
        }

        if (cardsData.length === 0) {
            req.flash('error', 'Kh√¥ng c√≥ th·∫ª ƒë·ªÉ gen!');
            return res.redirect(`/flashcards/${id}`);
        }

        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

        // prompt g·ªôp cho t·∫•t c·∫£ c√°c flashcard
        let prompt = `
*Must do it correctly without mistakes!
For each of the following flashcards, generate exactly 3 incorrect meanings for the given word.
The incorrect meanings must be in the same language as the provided meaning.
If the provided meaning is in Japanese:
  - When the meaning is written in Hiragana, all incorrect answers must be in Hiragana.
  - When the meaning is written in Kanji, all incorrect answers must be in Kanji.
  - When the meaning is written in Katakana, all incorrect answers must be in Katakana.
Output your answer in JSON format as an array of objects, where each object has two keys:
  - "vocabulary" (same as provided)
  - "wrongMeanings": an array of exactly 3 strings.
Do not include any additional text or explanation.
Here is the input flashcards array:
`;
        prompt += JSON.stringify(cardsData);

        const result = await model.generateContent(prompt);
        let rawText = result.response.text().trim();

        // Lo·∫°i b·ªè markdown code fences n·∫øu c√≥
        rawText = rawText.replace(/^```(?:json)?\s*/, '').replace(/\s*```$/, '');

        let wrongAnswersArray;
        try {
            wrongAnswersArray = JSON.parse(rawText);
        } catch (e) {
            console.error('Failed to parse API response as JSON:', e);
            wrongAnswersArray = [];
        }

        const quiz = {};
        for (let i = 0; i < cardsData.length; i++) {
            const { vocabulary, meaning } = cardsData[i];
            const question = `Nghƒ©a c·ªßa t·ª´: "${vocabulary}"?`;
            let wrongAnswers = [];

            if (wrongAnswersArray && wrongAnswersArray[i] && Array.isArray(wrongAnswersArray[i].wrongMeanings)) {
                wrongAnswers = wrongAnswersArray[i].wrongMeanings.slice(0, 3);
            } else {
                wrongAnswers = ['ü§ñ Xin l·ªói, h·∫øt kinh ph√≠ ch·∫°y model', 'ü§ñXin l·ªói, h·∫øt kinh ph√≠ ch·∫°y model', 'ü§ñXin l·ªói, h·∫øt kinh ph√≠ ch·∫°y model'];
            }

            const answers = [
                `+${meaning}`,
                `-${wrongAnswers[0] || 'ü§ñXin l·ªói, h·∫øt kinh ph√≠ ch·∫°y model'}`,
                `-${wrongAnswers[1] || 'ü§ñXin l·ªói, h·∫øt kinh ph√≠ ch·∫°y model'}`,
                `-${wrongAnswers[2] || 'ü§ñXin l·ªói, h·∫øt kinh ph√≠ ch·∫°y model'}`,
            ];

            // X√°o tr·ªôn m·∫£ng answers
            for (let j = answers.length - 1; j > 0; j--) {
                const k = Math.floor(Math.random() * (j + 1));
                [answers[j], answers[k]] = [answers[k], answers[j]];
            }

            quiz[`${i + 1} - ${question}`] = answers;
        }

        req.flash('success', 'R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n h·ªçc t·ª´ v·ª±ng!');
        return res.render('./page/flashcards/quiz', { quiz, flashcard });
    } catch (error) {
        console.error('L·ªói khi gen b√†i t·∫≠p:', error.message);
        req.flash('error', 'L·ªói khi t·∫°o b√†i t·∫≠p');
        return res.redirect(`/flashcards/`);
    }
});

export default router;
